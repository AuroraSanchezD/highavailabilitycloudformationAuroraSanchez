Description: CD12352 - Infrastructure as Code Project - Udagram

Parameters:

  ProjectName:
    Type: String
    Description: Tag for my project

  AutoScalingGroupCapacity:
    Type: String
    Description: Target capacity for instances


Resources:
  # Add your resources here. Resources I need to add: AutoScalingGroup, LoadBalancer, TargetGroups (to manage EC2 instances), S3 bucket, Security Group, IAM role and policiy. To edit: WebAppLaunchTemplate
  # We include a portion of the LaunchTemplate resource so you can use the UserData.

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Ref ProjectName
      VpcId:
        Fn::ImportValue:
          !Sub "${ProjectName}-vpc-id"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0

  WebAppLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub "${ProjectName}-web-servers"
      LaunchTemplateData:
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            apt-get update -y
            sudo apt-get install nginx -y
            service nginx start

            WEB_DIR="/var/www/html"

            cat <<EOF > index.html
            <!DOCTYPE html>
            <html>
            <head>
                <title>It works! Udagram, Udacity</title>
            </head>
            <body>
                <h1>It works! Udagram, Udacity</h1>
                <p>This website is hosted on Nginx.</p>
            </body>
            </html>
            EOF

            sudo rm -r $WEB_DIR/index.*
            sudo cp index.html $WEB_DIR

            sudo systemctl reload nginx

        ImageId: ami-04a81a99f5ec58529
        SecurityGroupIds:
          - !Ref SecurityGroup
        InstanceType: t2.micro
        BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: '10'
        IamInstanceProfile:
          Name: !Ref WebAppInstanceProfile
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: "auroraproject-some-suffix-blabla123"
      AccessControl: Private
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true

  WebAppInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}-web-servers"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: 'Allow'
          Principal:
            Service:
            - 'ec2.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      Policies:
        - PolicyName: s3
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - 's3:PutObject'
              - 's3:GetObject'
              Resource:
                - !GetAtt S3Bucket.Arn

  WebAppInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: '/'
      Roles:
      - !Ref WebAppInstanceRole

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: 
          !Sub "${ProjectName}-PRIV-NETS"
      LaunchTemplate:
        LaunchTemplateId: !Ref WebAppLaunchTemplate
        Version: !GetAtt WebAppLaunchTemplate.LatestVersionNumber
      MinSize: '1'
      DesiredCapacity: !Ref AutoScalingGroupCapacity
      MaxSize: '3'
      TargetGroupARNs:
      - Ref: TargetGroup

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http access to our load balancer
      VpcId:
        Fn::ImportValue:
          !Sub "${ProjectName}-vpc-id"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub "${ProjectName}-PUB-NET-1"
      - Fn::ImportValue: !Sub "${ProjectName}-PUB-NET-2"
      SecurityGroups:
      - Ref: LoadBalancerSecurityGroup
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: TargetGroup
      LoadBalancerArn:
        Ref: LoadBalancer
      Port: '80'
      Protocol: HTTP
  ListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref 'TargetGroup'
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref 'Listener'
        Priority: 1
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: "${ProjectName}-vpc-id"

Outputs:
  
  LoadBalancerUrl:
    Description: Application Load Balancer's URL
    Value: !Sub "http://${LoadBalancer.DNSName}"
    Export:
      Name: !Sub "${ProjectName}-LoadBalancerURL"
